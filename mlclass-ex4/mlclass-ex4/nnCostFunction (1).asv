function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
K=max(y);
Y=zeros(K,m);
for kk=1:m
    Y(y(kk),kk)=1;
end
% size(Y)=10X5000;
% size(X)=5000X400;
% size(X)=5000X401;
% size(Theta1)=25X401;
% size(Theta2)=10X26;
% size(X1)=5000X26;
% size(X2)=5000*10;
% size(a1)=5000X401;
% size(z2)=25X5000;
% size(a2)=26X5000;
% size(z3)=10X5000;
% size(a3)=10X5000;
% size(sigma3)=10X5000;

X = [ones(m,1) X];
X1= [ones(m,1) sigmoid(X*Theta1')];
X2=X1*Theta2';

J=trace(-Y'*log(sigmoid(X2))-(1-Y')*log(1-sigmoid(X2)));
J=J/m;

% Part 2: Implement the backpropagation algorithm to compute the gradients

a1=sigmoid(X);% 
z2=Theta1*a1';
a2=sigmoid(z2);
a2=[ones(1,m);a2];
z3=Theta2*a2;
a3=sigmoid(z3);

sigma3=a3-Y;
sigma2=(Theta2'*sigma3).*a2.*(1-a2);

% !!!!!! IMPORTANT LESSON, DEAR :D!!!!!!

delta2=zeros(size(Theta2));
for kk=1:m
    sigma3temp=sigma3(:,kk);% 10
    sigmoid
delta2=delta2+sigma3(:,kk)*a2(:,kk)';
end

delta1=zeros(size(Theta1));

for kk=1:m
delta1=delta1+sigma2(:,kk)*a1(kk,:);
end

Theta1_grad=delta1/m;
Theta2_grad=delta2/m;

% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
theta1=Theta1(:,2:end);
theta2=Theta2(:,2:end);
J=J+lambda*trace(theta1*theta1')/2/m;
J=J+lambda*trace(theta2*theta2')/2/m;

Theta1_grad=Theta1_grad+lambda*Theta1/m;
Theta2_grad=Theta2_grad+lambda*Theta2/m;

% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


% end
