function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
K=max(y);
Y=zeros(m,K);
for kk=1:m
    Y(kk,y(kk))=1;
end
% size(Y)=5000X10;
% size(X)=5000X400;
% Add ones to the X data matrix
X = [ones(m,1) X];
% Add ones to the X data matrix
% size(X)=5000X401;
% size(Theta1)=25X401;

X1= [ones(m,1) sigmoid(X*Theta1')];
% size(X1)=5000X26;
% size(Theta2)=10X26;
% size(Y)=5000*10;
X2=X1*Theta2';
% size(X2)=5000*10;
J=trace(-Y*log(sigmoid(X2'))-(1-Y)*log(1-sigmoid(X2')));
J=J/m;


% ptemp=sigmoid(X1*Theta2');% p now is a sample_m X num_labels matrix; 
% [~,p]=max(ptemp,[],2);
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
% calculate a1,z2,a2,z3,a3 first, and pay attention to the size change..
a1=sigmoid(X);% 
% size(a1)=5000X401;
% size(Theta1)=25X401;
z2=Theta1*a1';
% size(z2)=25X5000;
a2=sigmoid(z2);
% size(a2)=25X5000;
a2=[ones(1,m);a2];
% size(a2)=26X5000;
% size(Theta2)=10X26;
z3=Theta2*a2;
% size(z3)=10X5000;
a3=sigmoid(z3);
% size(a3)=10X5000;
% size(Y)=5000X10;
sigma3=a3-Y';
% size(sigma3)=10X5000;
% size(Theta2)=10X26;
% the eventual size of sigma2 should be 25X5000;
sigma2=zeros(size(Theta2,2)-1,m); % 25X5000
sigma2temp=zeros(size(Theta2,2),m); % 26X5000;
for kk=1:m
    sigma2temp(:,kk)=Theta2'*sigma3(:,kk);
    %% 26X5000
    for jj=2:size(Theta2,2)
    sigma2(jj-1,kk)=sigma2temp(jj,kk)*sigmoidGradient(z2(jj-1,kk));
        %%%%%%%%%%%%%26X1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%1
    end
end
delta2=zeros(size(Theta2));

for kk=1:m
delta2=delta2+sigma3(:,kk)*a2(:,kk)';
end
delta2temp=delta2(2:end,:);
delta2=delta2temp;

delta1=zeros(size(Theta1));

for kk=1:m
delta1=delta1+sigma2(:,kk)*a1(:,kk);
end

Theta1_grad=delta1/m;
Theta2_grad=delta2/m;

% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
theta1=Theta1(:,2:end);
theta2=Theta2(:,2:end);
J=J+lambda*trace(theta1*theta1')/2/m;
J=J+lambda*trace(theta2*theta2')/2/m;

Theta1_grad=Theta1_grad+lambda*Theta1;
Theta2_grad=Theta2_grad+lambda*Theta2;
















% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
